# 1 "mm_set.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "mm_set.c"






# 1 "./include/vproc.h" 1




# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 313 "/usr/include/features.h" 3 4
# 1 "/usr/include/bits/predefs.h" 1 3 4
# 314 "/usr/include/features.h" 2 3 4
# 346 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 353 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 354 "/usr/include/sys/cdefs.h" 2 3 4
# 347 "/usr/include/features.h" 2 3 4
# 378 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4




# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 2 3 4
# 379 "/usr/include/features.h" 2 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 37 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 120 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 6 "./include/vproc.h" 2
# 1 "/usr/include/errno.h" 1 3 4
# 32 "/usr/include/errno.h" 3 4




# 1 "/usr/include/bits/errno.h" 1 3 4
# 25 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4



# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/asm/errno.h" 2 3 4
# 5 "/usr/include/linux/errno.h" 2 3 4
# 26 "/usr/include/bits/errno.h" 2 3 4
# 43 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 37 "/usr/include/errno.h" 2 3 4
# 59 "/usr/include/errno.h" 3 4

# 7 "./include/vproc.h" 2
# 22 "./include/vproc.h"
# 1 "./include/debug.h" 1


# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 35 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 37 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 416 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 460 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));
# 490 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));
# 76 "/usr/include/stdio.h" 2 3 4
# 89 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;




# 141 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 142 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) __attribute__ ((__nothrow__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));














extern FILE *tmpfile (void) ;
# 186 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__)) ;

# 209 "/usr/include/stdio.h" 3 4





extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 243 "/usr/include/stdio.h" 3 4






extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 272 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4



extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__));

# 328 "/usr/include/stdio.h" 3 4





extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 402 "/usr/include/stdio.h" 3 4





extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__));
# 425 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (__const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (__const char *__restrict __s, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__));
# 445 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 476 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (__const char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 504 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 547 "/usr/include/stdio.h" 3 4








extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 599 "/usr/include/stdio.h" 3 4





extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 657 "/usr/include/stdio.h" 3 4





extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;

# 717 "/usr/include/stdio.h" 3 4





extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 765 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 788 "/usr/include/stdio.h" 3 4

# 797 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;

# 814 "/usr/include/stdio.h" 3 4





extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 827 "/usr/include/stdio.h" 2 3 4
# 916 "/usr/include/stdio.h" 3 4

# 4 "./include/debug.h" 2
# 23 "./include/vproc.h" 2



# 1 "./include/inclusions.h" 1

# 1 "./include/vp_buf.h" 1
# 17 "./include/vp_buf.h"
# 1 "./include/vp_lock.h" 1
# 21 "./include/vp_lock.h"
# 1 "/usr/include/pthread.h" 1 3 4
# 24 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 25 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4


# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 33 "/usr/include/sched.h" 2 3 4


# 1 "/usr/include/bits/sched.h" 1 3 4
# 71 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };


# 90 "/usr/include/bits/sched.h" 3 4








struct __sched_param
  {
    int __sched_priority;
  };
# 113 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 196 "/usr/include/bits/sched.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  __attribute__ ((__nothrow__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__));


# 36 "/usr/include/sched.h" 2 3 4







extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     __attribute__ ((__nothrow__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) __attribute__ ((__nothrow__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__));


extern int sched_yield (void) __attribute__ ((__nothrow__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__));


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__));
# 118 "/usr/include/sched.h" 3 4

# 26 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 43 "/usr/include/time.h" 2 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;

# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;

# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;





  long int __tm_gmtoff;
  __const char *__tm_zone;

};

# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) __attribute__ ((__nothrow__));

# 230 "/usr/include/time.h" 3 4



extern struct tm *gmtime (__const time_t *__timer) __attribute__ ((__nothrow__));



extern struct tm *localtime (__const time_t *__timer) __attribute__ ((__nothrow__));

# 252 "/usr/include/time.h" 3 4



extern char *asctime (__const struct tm *__tp) __attribute__ ((__nothrow__));


extern char *ctime (__const time_t *__timer) __attribute__ ((__nothrow__));

# 276 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;
# 417 "/usr/include/time.h" 3 4

# 27 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/signal.h" 2 3 4
# 50 "/usr/include/signal.h" 3 4
typedef __sigset_t sigset_t;
# 408 "/usr/include/signal.h" 3 4

# 30 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;
# 31 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 32 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 33 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP
# 63 "/usr/include/pthread.h" 3 4
};
# 149 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 184 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 222 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 265 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) __attribute__ ((__nothrow__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 415 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__));
# 468 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 480 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 514 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 654 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 666 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 707 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 747 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 782 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 944 "/usr/include/pthread.h" 3 4
extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 976 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
                                        __restrict __attr,
                                        int *__restrict __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
                                        int __pshared) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 1087 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__));


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) __attribute__ ((__nothrow__)) ;
# 1121 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__));
# 1135 "/usr/include/pthread.h" 3 4

# 22 "./include/vp_lock.h" 2
# 1 "/usr/include/sys/time.h" 1 3 4
# 29 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/bits/time.h" 1 3 4
# 69 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 30 "/usr/include/sys/time.h" 2 3 4

# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 23 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/select.h" 2 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 35 "/usr/include/sys/select.h" 2 3 4
# 46 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/time.h" 1 3 4
# 47 "/usr/include/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;
# 99 "/usr/include/sys/select.h" 3 4

# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 128 "/usr/include/sys/select.h" 3 4

# 32 "/usr/include/sys/time.h" 2 3 4








# 65 "/usr/include/sys/time.h" 3 4
typedef void *__restrict __timezone_ptr_t;







extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 93 "/usr/include/sys/time.h" 3 4
enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__));




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__));




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 191 "/usr/include/sys/time.h" 3 4

# 23 "./include/vp_lock.h" 2

struct _vp_lock_s {
    pthread_mutex_t handle;
    pthread_t locker;
    int32_t count;
# 37 "./include/vp_lock.h"
    int (*_lock)(void *handle);
    int (*_unlock)(void *handle);
    int (*_trylock)(void *handle);
};
typedef struct _vp_lock_s VP_LOCK;

typedef struct _vp_signal_s VP_SIGNAL;
struct _vp_signal_s {
    pthread_cond_t handle;
    VP_LOCK lock;
    int32_t count;
# 57 "./include/vp_lock.h"
    int (*_one)(VP_SIGNAL *handle);
    int (*_all)(VP_SIGNAL *handle);
    int (*_wait)(VP_SIGNAL *handle, int msec);
};






# 1 "./include/sys/vp_lock_sys.h" 1
# 129 "./include/sys/vp_lock_sys.h"
    static inline int vproc_trylock(VP_LOCK *l) {
        if (!l->locker) {

            do { if (l->locker != pthread_self()) { ; l->_lock(l); l->locker = pthread_self(); l->count = 0; } l->count++; } while(0);
            return 0;
        }
        if (l->locker == pthread_self()) {

            l->count = 1;
            return 0;
        }


        return 16;
    }
# 160 "./include/sys/vp_lock_sys.h"
    static inline int __vproc_signal (VP_SIGNAL *sig, int all) {
        VP_LOCK * restrict slock = &sig->lock;
        int * restrict count = &sig->count;
        if (!*count) return 0;

        int ret = *count;

        ;

        if (slock->locker != pthread_self()) {

            do { if (slock->locker != pthread_self()) { ; slock->_lock(slock); slock->locker = pthread_self(); slock->count = 0; } slock->count++; } while(0);
            slock->count = 1;
        }

        if (all) pthread_cond_broadcast((pthread_cond_t*)sig);
        else pthread_cond_signal((pthread_cond_t*)sig);


        do { if (slock->locker && slock->locker == pthread_self() && !--slock->count) { ; slock->locker = 0; slock->_unlock(slock); } } while(0);




        if (!all) ret--;
        return ret;
    }


    static inline int __vp_signal_one(VP_SIGNAL *sig) { return __vproc_signal(sig, 0); }
    static inline int __vp_signal_all(VP_SIGNAL *sig) { return __vproc_signal(sig, 1); }

    static inline int __vp_signal_wait (VP_SIGNAL *sig, int msec) {
        VP_LOCK * restrict slock = &sig->lock;
        int * restrict count = &sig->count;
        int ret = 0;
        if (slock->locker != pthread_self()) {

            do { if (slock->locker != pthread_self()) { ; slock->_lock(slock); slock->locker = pthread_self(); slock->count = 0; } slock->count++; } while(0);
        }






        slock->count = 0;


        (*count)++;

        ;

        if (!msec)
            pthread_cond_wait((pthread_cond_t*)sig, (pthread_mutex_t*)slock);
        else {
            ;
            struct timeval now;
            struct timespec to;
            gettimeofday(&now, ((void *)0));
            to.tv_sec = now.tv_sec;
            if (msec > 1000000) {
                to.tv_sec += (msec / 1000000);
                msec %= 1000000;
            }
            to.tv_nsec = (now.tv_usec + msec) * 1000;

            if (pthread_cond_timedwait((pthread_cond_t*)sig, (pthread_mutex_t*)slock, &to)) {
                ;
                ret = -1;
            } else {
                ;
            }
        }






        slock->locker = pthread_self();
        slock->count = 1;
        do { if (slock->locker && slock->count) { slock->count = 0; slock->locker = 0; slock->_unlock(slock); } } while (0);


        return 0;

    }
# 68 "./include/vp_lock.h" 2
# 18 "./include/vp_buf.h" 2



# 1 "./include/sys/vp_buf_sys.h" 1
# 9 "./include/sys/vp_buf_sys.h"
# 1 "./include/vp_lock.h" 1
# 10 "./include/sys/vp_buf_sys.h" 2


struct _vp_buf_sys_s {
    struct _mm_set_s *id;
    uint64_t seq_id;
    VP_LOCK lock;
    uint32_t size;
    int32_t refs;
};
typedef struct _vp_buf_sys_s VP_BUF;
# 22 "./include/vp_buf.h" 2
# 3 "./include/inclusions.h" 2


# 1 "./include/vp_fmt.h" 1
# 21 "./include/vp_fmt.h"
struct _vp_fmt_s {
    char name[16];
    uint32_t id;
    uint32_t flags;
    uint8_t channels;
    uint8_t bpp;
    uint16_t width;
    uint16_t height;
    uint32_t pixels;
    uint32_t size;
};
typedef struct _vp_fmt_s VP_FMT;

VP_FMT *create_format (const char *name, unsigned int width, unsigned int height, uint8_t channels, uint8_t bpp);
# 6 "./include/inclusions.h" 2


# 1 "./include/vp_feed.h" 1
# 20 "./include/vp_feed.h"
# 1 "./include/lib/vp_feed_lib.h" 1
# 14 "./include/lib/vp_feed_lib.h"
# 1 "./include/vp_fmt.h" 1
# 15 "./include/lib/vp_feed_lib.h" 2
# 1 "./include/vp_buf.h" 1
# 16 "./include/lib/vp_feed_lib.h" 2
typedef struct _vp_feed_s VP_FEED;
# 1 "./include/vproc_sm.h" 1
# 18 "./include/vproc_sm.h"
# 1 "./include/vp_stream.h" 1
# 18 "./include/vp_stream.h"
# 1 "./include/lib/vp_stream_lib.h" 1
typedef void VP_STREAM;
# 19 "./include/vp_stream.h" 2
# 19 "./include/vproc_sm.h" 2
# 29 "./include/vproc_sm.h"
# 1 "./include/lib/vproc_sm_lib.h" 1
# 30 "./include/vproc_sm.h" 2






VP_STREAM *open_stream (const char *name, uint32_t flags);
VP_FEED *open_feed (VP_STREAM *stream, const char *name, VP_FMT *fmt);
int vproc_sm_init();
# 18 "./include/lib/vp_feed_lib.h" 2
# 29 "./include/lib/vp_feed_lib.h"
typedef struct _vproc_feed_ctrl_s {
# 41 "./include/lib/vp_feed_lib.h"
    int (* const set_format)(VP_FEED *feed, VP_FMT *format_ptr);
# 50 "./include/lib/vp_feed_lib.h"
    VP_FMT *(* const get_format) (VP_FEED *feed);
# 92 "./include/lib/vp_feed_lib.h"
    int (* const aquire)(VP_FEED *feed, void **buf);
# 113 "./include/lib/vp_feed_lib.h"
    int (* const release)(VP_FEED *feed);






    void *(* const current)(VP_FEED *feed);
# 136 "./include/lib/vp_feed_lib.h"
    int (* const close_feed)(VP_FEED *feed);



} VP_FEED_CTRLS;
# 21 "./include/vp_feed.h" 2
# 31 "./include/vp_feed.h"
struct _vp_feed_s {

    char name[32];


    void *buffer;


    struct {
        uint32_t local;
        uint32_t *global;
    } flags;


    VP_STREAM *stream;


    VP_FMT *format;


    VP_FEED_CTRLS ctrl;


    void *priv;
# 79 "./include/vp_feed.h"
        char __core[40];
# 143 "./include/vp_feed.h"
};
# 155 "./include/vp_feed.h"
int vp_feed_frame_sz (VP_FEED *feed);
VP_FEED *create_feed (const char *name, VP_FMT *format);

int vp_feed_set_format (VP_FEED *feed, VP_FMT *fmt);
VP_FMT *vp_feed_get_format (VP_FEED *feed);
int vp_feed_aquire_buffer (VP_FEED *feed, void **buf);
int vp_feed_release_buffer (VP_FEED *feed);
void *vp_feed_current_buffer (VP_FEED *feed);
int vp_feed_close (VP_FEED *feed);
VP_FEED *reopen_feed (VP_FEED *feed);
# 9 "./include/inclusions.h" 2
# 17 "./include/inclusions.h"
# 1 "./include/vproc_mm.h" 1
# 20 "./include/vproc_mm.h"
# 1 "/usr/include/sys/types.h" 1 3 4
# 29 "/usr/include/sys/types.h" 3 4

# 46 "/usr/include/sys/types.h" 3 4
typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 62 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 100 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;
# 110 "/usr/include/sys/types.h" 3 4
typedef __ssize_t ssize_t;
# 147 "/usr/include/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4
# 201 "/usr/include/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 235 "/usr/include/sys/types.h" 3 4
typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 273 "/usr/include/sys/types.h" 3 4

# 21 "./include/vproc_mm.h" 2






# 1 "./include/sys/vproc_mm_sys.h" 1
# 39 "./include/sys/vproc_mm_sys.h"
# 1 "./include/vp_feed.h" 1
# 40 "./include/sys/vproc_mm_sys.h" 2


typedef union _mm_single_sys_s {
    struct {
        VP_BUF *active;
    } by_pos;
    VP_BUF *by_index[1];
} MM_SINGLE;

typedef union _mm_toggle_sys_s {
    struct {
        VP_BUF *active;
        VP_BUF *next;
    } pos;
    VP_BUF *index[2];
} MM_TOGGLE;

typedef union _mm_pool_sys_s {
    struct {
        VP_BUF *active;
        VP_BUF *next;
        VP_BUF *latest;
        VP_BUF *free;
    } pos;

    VP_BUF *index[4];
} MM_POOL;

typedef struct _mm_set_s {
    uint8_t type;
    uint32_t flags;
    VP_LOCK lock;
    VP_FEED *feed;
    MM_POOL buffers;
} MM_SET;


MM_SET *create_mm_set(uint8_t type, VP_FEED *feed);



uint32_t cycle_buffer_states (MM_SET *mmset);
void vp_mm_push_free_chain (VP_BUF *buf);
uint32_t add_buffer_to_free_chain (MM_SET *mmset);



void display_mm_summary_header (FILE *output);
void display_mm_summary (FILE *output);
void display_mm_usage (FILE *output);
# 28 "./include/vproc_mm.h" 2
# 40 "./include/vproc_mm.h"
int vproc_mm_init ();
# 18 "./include/inclusions.h" 2


# 1 "./include/vproc_sm.h" 1
# 21 "./include/inclusions.h" 2
# 27 "./include/vproc.h" 2
# 8 "mm_set.c" 2

static uint32_t locate_next_buffer (MM_SET *mmset);
static void *pop_free_chain (MM_SET *mmset);
static inline MM_SET *init_mm_pool (MM_SET *mmset);
static inline MM_SET *init_mm_toggle (MM_SET *mmset);
static inline MM_SET *init_mm_single (MM_SET *mmset);
static VP_BUF *create_vp_buf (size_t bufsize, void *set);
# 30 "mm_set.c"
MM_SET *create_mm_set(uint8_t type, VP_FEED *feed) {
    MM_SET *mmset = malloc(sizeof(MM_SET));
    mmset->type = type;
    mmset->feed = feed;

    switch (type) {
        case(3):
            ;
            return init_mm_pool(mmset);
        case(2):
            ;
            return init_mm_toggle(mmset);
        case(1):
            ;
            return init_mm_single(mmset);
    }

    do { fprintf(stderr, "(0x%X) ERROR [" "mm_set.c" ":%u] (" "MM" "):  " "Unknown MM_SET type %d" "\n", pthread_self(), 47, type); fflush(stderr); } while (0);

    (*__errno_location ()) = 22;
    return ((void *)0);
}




static inline MM_SET *init_mm_pool (MM_SET *mmset) {
    uint32_t bufsz = vp_feed_frame_sz(mmset->feed);

    mmset->buffers.pos.active = create_vp_buf(bufsz, mmset);
    mmset->buffers.pos.next = create_vp_buf(bufsz, mmset);
    mmset->buffers.pos.latest = ((void *)0);
    mmset->buffers.pos.free = ((void *)0);

    ;
    ;

    mmset->buffers.pos.active->refs = 1;
    mmset->buffers.pos.next->refs = 1;

    do { ((&(mmset->lock)))->handle = (pthread_mutex_t){ { 0, 0, 0, 0, 0, 0, { 0, 0 } } }; ((&(mmset->lock)))->_lock = (int(*)(void*))pthread_mutex_lock; ((&(mmset->lock)))->_unlock = (int(*)(void*))pthread_mutex_unlock; ((&(mmset->lock)))->_trylock= (int(*)(void*))pthread_mutex_trylock; ((&(mmset->lock)))->locker = 0; ((&(mmset->lock)))->count = 0; } while(0);
    add_buffer_to_free_chain(mmset);

    ;

    return mmset;

}




static inline MM_SET *init_mm_toggle (MM_SET *mmset) {
    uint32_t bufsz = vp_feed_frame_sz(mmset->feed);

    mmset->buffers.pos.active = create_vp_buf(bufsz, mmset);
    mmset->buffers.pos.next = create_vp_buf(bufsz, mmset);
    do { ((&(mmset->lock)))->handle = (pthread_mutex_t){ { 0, 0, 0, 0, 0, 0, { 0, 0 } } }; ((&(mmset->lock)))->_lock = (int(*)(void*))pthread_mutex_lock; ((&(mmset->lock)))->_unlock = (int(*)(void*))pthread_mutex_unlock; ((&(mmset->lock)))->_trylock= (int(*)(void*))pthread_mutex_trylock; ((&(mmset->lock)))->locker = 0; ((&(mmset->lock)))->count = 0; } while(0);

    return mmset;
}





static inline MM_SET *init_mm_single (MM_SET *mmset) {
    uint32_t bufsz = vp_feed_frame_sz(mmset->feed);
    mmset->buffers.pos.active = create_vp_buf(bufsz, mmset);
    return mmset;
}






uint32_t add_buffer_to_free_chain (MM_SET *mmset) {
    if (mmset->type != 3) {
        do { fprintf(stderr, "(0x%X) ERROR [" "mm_set.c" ":%u] (" "POOL" "):  " "Unable to add buffer to free chain: MM_SET is not a POOL (type: %u)!" "\n", pthread_self(), 109, mmset->type); fflush(stderr); } while (0);
        return -1;
    }

    void *buf = create_vp_buf(vp_feed_frame_sz(mmset->feed), mmset);
    ;
    vp_mm_push_free_chain(buf);
    ;

    return 0;
}





uint32_t cycle_buffer_states (MM_SET *mmset) {
    VP_LOCK * restrict plock = &mmset->lock;

    if (mmset->type == 2) {




        VP_BUF ** restrict tactive = &mmset->buffers.pos.active;
        VP_BUF ** restrict tnext = &mmset->buffers.pos.next;

        do { if (plock->locker != pthread_self()) { ; plock->_lock(plock); plock->locker = pthread_self(); plock->count = 0; } plock->count++; } while(0);
        void *tmp = *tnext;
        *tnext = *tactive;
        *tactive = tmp;
        do { if (plock->locker && plock->locker == pthread_self() && !--plock->count) { ; plock->locker = 0; plock->_unlock(plock); } } while(0);

        return 0;
    }

    if (mmset->type == 3) {




        VP_BUF ** restrict pactive = &mmset->buffers.pos.active;
        VP_BUF ** restrict pnext = &mmset->buffers.pos.next;
        VP_BUF ** restrict platest = &mmset->buffers.pos.latest;


        ;





        do { if (plock->locker != pthread_self()) { ; plock->_lock(plock); plock->locker = pthread_self(); plock->count = 0; } plock->count++; } while(0);


        if (*platest)
            do { ; do { if ((&((*platest)->lock))->locker != pthread_self()) { ; (&((*platest)->lock))->_lock((&((*platest)->lock))); (&((*platest)->lock))->locker = pthread_self(); (&((*platest)->lock))->count = 0; } (&((*platest)->lock))->count++; } while(0); (*platest)->refs--; if ((*platest)->refs < 1) { ; do { if ((&((*platest)->lock))->locker && (&((*platest)->lock))->locker == pthread_self() && !--(&((*platest)->lock))->count) { ; (&((*platest)->lock))->locker = 0; (&((*platest)->lock))->_unlock((&((*platest)->lock))); } } while(0); vp_mm_push_free_chain((*platest)); break; } do { if ((&((*platest)->lock))->locker && (&((*platest)->lock))->locker == pthread_self() && !--(&((*platest)->lock))->count) { ; (&((*platest)->lock))->locker = 0; (&((*platest)->lock))->_unlock((&((*platest)->lock))); } } while(0); ; } while(0);


        *platest = *pactive;


        if (!*pnext) locate_next_buffer(mmset);

        pnext = &mmset->buffers.pos.next;


        *pactive = *pnext;


        *pnext = ((void *)0);
        locate_next_buffer(mmset);

        do { if (plock->locker && plock->locker == pthread_self() && !--plock->count) { ; plock->locker = 0; plock->_unlock(plock); } } while(0);

        ;





        return 0;
    }

    do { fprintf(stderr, "(0x%X) ERROR [" "mm_set.c" ":%u] (" "MM" "):  " "Attempted to cycle buffers for unsupported MM_SET type %u" "\n", pthread_self(), 193, mmset->type); fflush(stderr); } while (0);
    return -1;

}




static uint32_t locate_next_buffer (MM_SET *mmset) {
    VP_BUF ** restrict pnext = &mmset->buffers.pos.next;
    VP_LOCK * restrict plock = &mmset->lock;
    uint8_t * restrict stype = &mmset->type;

    if (*stype != 3) {

        do { fprintf(stderr, "(0x%X) ERROR [" "mm_set.c" ":%u] (" "POOL" "):  " "Attempted to locate next buffer for a set which is NOT a pool (type: %u)" "\n", pthread_self(), 208, *stype); fflush(stderr); } while (0);
        return -1;
    }

    if (*pnext) {
        ;
        return 0;
    }

    do { if (plock->locker != pthread_self()) { ; plock->_lock(plock); plock->locker = pthread_self(); plock->count = 0; } plock->count++; } while(0);


    ;
    VP_BUF *buf = pop_free_chain(mmset);
    ;
    if (!buf) {

        do { fprintf(stderr, "(0x%X) ERROR [" "mm_set.c" ":%u] (" "POOL" "):  " "When cycling buffers, no buffer in next position, and no buffers in free chain: (set: 0x%08X)!" "\n", pthread_self(), 225, mmset); fflush(stderr); } while (0);

        add_buffer_to_free_chain(mmset);
        do { if (plock->locker && plock->locker == pthread_self() && !--plock->count) { ; plock->locker = 0; plock->_unlock(plock); } } while(0);
        return 0;
    }

    ;
    ;
    *pnext = buf;
    do { ; do { if ((&(buf->lock))->locker != pthread_self()) { ; (&(buf->lock))->_lock((&(buf->lock))); (&(buf->lock))->locker = pthread_self(); (&(buf->lock))->count = 0; } (&(buf->lock))->count++; } while(0); buf->refs++; do { if ((&(buf->lock))->locker && (&(buf->lock))->locker == pthread_self() && !--(&(buf->lock))->count) { ; (&(buf->lock))->locker = 0; (&(buf->lock))->_unlock((&(buf->lock))); } } while(0); } while(0);
    ;

    do { if (plock->locker && plock->locker == pthread_self() && !--plock->count) { ; plock->locker = 0; plock->_unlock(plock); } } while(0);

    return 0;
}





void vp_mm_push_free_chain (VP_BUF *buf) {
    MM_SET * mmset = (MM_SET*)buf->id;
    VP_LOCK * restrict plock = &mmset->lock;
    MM_POOL * restrict mmpool = &mmset->buffers;
    VP_BUF ** restrict pfree = &mmpool->pos.free;
    VP_BUF ** restrict pnext = &mmpool->pos.next;

    if (!mmset) {
        ;
        free(buf);
        return;
    }

    do { if (plock->locker != pthread_self()) { ; plock->_lock(plock); plock->locker = pthread_self(); plock->count = 0; } plock->count++; } while(0);

    ;
    if (!*pnext) {

        ;
        do { ; do { if ((&(buf->lock))->locker != pthread_self()) { ; (&(buf->lock))->_lock((&(buf->lock))); (&(buf->lock))->locker = pthread_self(); (&(buf->lock))->count = 0; } (&(buf->lock))->count++; } while(0); buf->refs++; do { if ((&(buf->lock))->locker && (&(buf->lock))->locker == pthread_self() && !--(&(buf->lock))->count) { ; (&(buf->lock))->locker = 0; (&(buf->lock))->_unlock((&(buf->lock))); } } while(0); } while(0);
        *pnext = buf;
    } else {
        ;
        vp_mm_chain_push((void**)pfree, buf);
    }

    do { if (plock->locker && plock->locker == pthread_self() && !--plock->count) { ; plock->locker = 0; plock->_unlock(plock); } } while(0);

    return;
}






static void *pop_free_chain (MM_SET *mmset) {
    VP_LOCK * restrict plock = &mmset->lock;
    MM_POOL * restrict mmpool = &mmset->buffers;
    VP_BUF ** restrict pfree = &mmpool->pos.free;


    if (!*pfree) {
        do { fprintf(stderr, "(0x%X) ERROR [" "mm_set.c" ":%u] (" "POOL" "):  " "Unable to pop a buffer from the free chain: No buffers left in chain. (set: 0x%08X)" "\n", pthread_self(), 290, mmset); fflush(stderr); } while (0);
        return ((void *)0);
    }

    do { if (plock->locker != pthread_self()) { ; plock->_lock(plock); plock->locker = pthread_self(); plock->count = 0; } plock->count++; } while(0);

    ;
    void *addr = vp_mm_chain_pop((void**)pfree);

    do { if (plock->locker && plock->locker == pthread_self() && !--plock->count) { ; plock->locker = 0; plock->_unlock(plock); } } while(0);

    return addr;
}

static VP_BUF *create_vp_buf (size_t bufsize, void *set) {
    VP_BUF *buf = calloc(1, bufsize + sizeof(VP_BUF));
    buf->id = set;
    buf->seq_id = 0;
    buf->size = bufsize;
    buf->refs = 0;
    do { ((&buf->lock))->handle = (pthread_mutex_t){ { 0, 0, 0, 0, 0, 0, { 0, 0 } } }; ((&buf->lock))->_lock = (int(*)(void*))pthread_mutex_lock; ((&buf->lock))->_unlock = (int(*)(void*))pthread_mutex_unlock; ((&buf->lock))->_trylock= (int(*)(void*))pthread_mutex_trylock; ((&buf->lock))->locker = 0; ((&buf->lock))->count = 0; } while(0);
    return buf;
}
